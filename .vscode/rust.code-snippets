{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Write derive(Serialize)": {
		"scope": "rust",
		"prefix": "derser",
		"body": [
			"#[derive(Serialize)]"
		],
		"description": "Create derive decorator"
	},
	"Write derive(Deserialize)": {
		"scope": "rust",
		"prefix": "derdes",
		"body": [
			"#[derive(Deserialize)]"
		],
		"description": "Create derive decorator"
	},
	"Implement API endpoint": {
		"scope": "rust",
		"prefix": "apiendpoint",
		"body": [
			"/// ${4:Documentation}",
			"#[api_endpoint(path = \"/${1:path}\", auth = \"required\")]",
			"pub fn ${2:name}(query: ()) -> ApiResult<${3:type}> {",
			"    let conn = state.db();",
			"    unimplemented!();",
			"}"
		]
	},
	"Implement API method call for test": {
		"scope": "rust",
		"prefix": "apicalltesthelper",
		"body": [
			"pub fn ${1:api_name}(&self, ${5:param}) -> ApiResult<${2:models::ReturnType}> {",
			"    let api = self.testkit.api();",
			"    api.public(ApiKind::${3:System})",
			"        .query(${6:Data})",
			"        .${7:get}::<ApiResult<${2:models::ReturnType}>>(\"v1/${4:endpoint}\")",
			"        .expect(\"cannot via API call\")",
			"}"
		],
		"description": "Create API method call for test"
	},
	"Implement API test": {
		"scope": "rust",
		"prefix": "apitest",
		"body": [
			"#[test]",
			"fn test_${1:name}(){",
			"    testkit!(tk, h, ah);",
			"    ${2:// code here}",
			"}"
		],
		"description": "Create api test function"
	}
}
