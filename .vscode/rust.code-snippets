{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Write derive(Serialize)": {
		"scope": "rust",
		"prefix": "derser",
		"body": [
			"#[derive(Serialize)]"
		],
		"description": "Create derive decorator"
	},
	"Write derive(Deserialize)": {
		"scope": "rust",
		"prefix": "derdes",
		"body": [
			"#[derive(Deserialize)]"
		],
		"description": "Create derive decorator"
	},
	"Write derive(Serialize, Deserialize)": {
		"scope": "rust",
		"prefix": "serdes",
		"body": [
			"#[derive(Serialize, Deserialize)]"
		],
		"description": "Create derive with Serialize and Deserialize decorator"
	},
	"Implement API method call for test": {
		"scope": "rust",
		"prefix": "apicalltesthelper",
		"body": [
			"pub fn ${1:api_name}(&self, ${5:param}) -> ApiResult<${2:models::ReturnType}> {",
			"    let api = self.testkit.api();",
			"    api.public(ApiKind::${3:System})",
			"        .query(${6:Data})",
			"        .${7:get}::<ApiResult<${2:models::ReturnType}>>(\"v1/${4:endpoint}\")",
			"        .expect(\"cannot via API call\")",
			"}"
		],
		"description": "Create API method call for test"
	},
	"Implement API test": {
		"scope": "rust",
		"prefix": "apitest",
		"body": [
			"#[test]",
			"fn test_${1:name}(){",
			"    testkit!(tk, h, ah);",
			"    ${2:// code here}",
			"}"
		],
		"description": "Create api test function"
	},
	"Implement API endpoint": {
		"scope": "rust",
		"prefix": "apiendpoint",
		"body": [
			"/// ${5:docs}.",
			"#[api_endpoint(path = \"/${1:path}\", auth = \"${2:required}\")]",
			"pub fn ${3:method_name}(query: IdQuery) -> ApiResult<${4:Type}> {",
			"    let conn = state.db();",
			"    ${6://@TODO(*): code here}",
			"    unimplemented!();",
			"}"
		]
	},
	"Implement API endpoint for search": {
		"scope": "rust",
		"prefix": "apiendpointsearch",
		"body": [
			"/// Search for ${1:name}",
			"#[api_endpoint(path = \"/search\", auth = \"required\")]",
			"pub fn search_${1:name}(query: QueryEntries) -> ApiResult<EntriesResult<${2:Model}>> {",
			"    let conn = state.db();",
			"    let dao = ${2:Model}Dao::new(&conn);",
			"",
			"    let entries = dao",
			"        .search(&query.query.unwrap_or(\"\".to_string()), query.offset, query.limit)?",
			"        .into_iter()",
			"        .map(|p| p.into())",
			"        .collect();",
			"",
			"    let count = dao.count()?;",
			"    Ok(ApiResult::success(EntriesResult { count, entries }))",
			"}"
		]
	},
	"Implement API endpoint for update": {
		"scope": "rust",
		"prefix": "apiendpointupdate",
		"body": [
			"/// Update ${1:name}.",
			"#[api_endpoint(path = \"/update\", auth = \"required\", mutable)]",
			"pub fn update_${1:name}(query: Update${2:Name}) -> ApiResult<()> {",
			"    let conn = state.db();",
			"    use crate::schema::${1:name}s::{self, dsl};",
			"    diesel::update(dsl::${1:name}s.filter(dsl::id.eq(query.id)))",
			"        .set(dsl::name.eq(&query.name))",
			"        .execute(&conn)",
			"        .map_err(Error::from)?;",
			"        Ok(ApiResult::success(()))",
			"}"
		]
	},
	"Implement custom Dao": {
		"scope": "rust",
		"prefix": "impldao",
		"body": [
			"#[derive(Insertable)]",
			"#[table_name = \"${2:name}s\"]",
			"struct New${1:Name}<'a> {",
			"    pub name: &'a str,",
			"}",
			"",
			"impl<'a> ${1:Name}Dao<'a> {",
			"    /// Create new ${1:name}",
			"    pub fn create(",
			"        &self,",
			"        name: &str,",
			"        ) -> Result<${1:Name}> {",
			"        use crate::schema::${2:name}s::{self, dsl};",
			"",
			"        diesel::insert_into(${2:name}s::table)",
			"            .values(&New${1:Name} {",
			"                name,",
			"            })",
			"            .get_result(self.db)",
			"            .map_err(From::from)",
			" }",
			"}"
		]
	},
	"Generate dao get_by_name method": {
		"prefix": "daogetbyname",
		"body": [
			"/// Mendapatkan ${1:name} berdasarkan nama-nya.",
			"pub fn get_by_name(&self, name: &str) -> Result<${2:RetType}> {",
			"  use crate::schema::${1:name}s::{self, dsl};",
			"  dsl::${1:name}s",
			"    .filter(dsl::name.eq(name))",
			"    .first(self.db)",
			"    .map_err(From::from)",
			"}"
		]
	},
	"Implement From": {
		"prefix": "implfrommodeltoapitype",
		"body": [
			"impl From<models::${1:Name}> for ${1:Name} {",
			"    fn from(a: models::${1:Name}) -> Self {",
			"        ${2:}",
			"    }",
			"}"
		]
	},
	"Create diesel update code": {
		"prefix": "dieselupdate",
		"body": [
			"use crate::schema::${1:name}s::{self, dsl};",
			"diesel::update(dsl::${1:name}s.filter(dsl::id.eq(id)))",
			"    .set(dsl::name.eq(&name))",
			"    .execute(&conn)",
			"    .map_err(Error::from)?;"
		]
	},
	"Create diesel insert code": {
		"prefix": "dieselinsert",
		"body": [
			"use crate::schema::${1:name}::{self, dsl};",
			"diesel::insert_into(${1:name}::table)",
			"    .values(&{2:})",
			"    .execute(&conn)",
			"    ${3:.map_err(From::from)}?;"
		]
	},
	"Create ApiResult::success": {
		"prefix": "apiresultsucess",
		"body": [
			"Ok(ApiResult::success(${1:()}))"
		]
	},
	"Create DAO search method": {
		"prefix": "daosearchmethod",
		"body": [
			"/// Search for specific ${1:model_name}s",
			"pub fn search(&self, query: &str, offset: i64, limit: i64) -> Result<Vec<Task>> {",
			"    use crate::schema::${1:model_name}s::{self, dsl};",
			"",
			"    let like_clause = format!(\"%{}%\", query);",
			"",
			"    let mut filterer: Box<dyn BoxableExpression<${1:model_name}s::table, _, SqlType = sql_types::Bool>> =",
			"        Box::new(dsl::id.ne(0));",
			"",
			"    filterer = Box::new(filterer.and(dsl::name.like(&like_clause)));",
			"",
			"    dsl::${1:model_name}s",
			"        .filter(filterer)",
			"        .offset(offset)",
			"        .limit(limit)",
			"        .load(self.db)",
			"        .map_err(From::from)",
			"}"
		]
	}
}
