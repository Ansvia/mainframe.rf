{
	// Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
    // }
    "Create bloc abstract class state": {
        "prefix": "statebase",
        "body": [
            "@immutable",
            "abstract class ${1:Name}State extends Equatable {",
            "  ${1:Name}State([List props = const []]) : super(props);",
            "}"
        ]
    },
    "Create bloc state": {
        "prefix": "state",
        "body": [
            "class ${1:Name} extends ${2:App}State {",
                "  @override",
                "  String toString() => \"${1:Name}\";",
            "}"
        ],
        "description": "Create bloc state class definition"
    },
    "Create stateles widget": {
        "prefix": "stateleswidget",
        "body": [
            "class ${1:Name} extends StatelessWidget {",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    ${2:return null};",
            "  }",
            "}"
        ],
        "description": "Create stateless widget class"
    },
    "Create bloc abstract class event": {
        "prefix": "eventbase",
        "body": [
            "@immutable",
            "abstract class ${1:Name}Event extends Equatable {",
            "  ${1:Name}Event([List props = const []]) : super(props);",
            "}"
        ]
    },
    "Create bloc event": {
        "prefix": "event",
        "body": [
            "class ${1:Name} extends ${2:App}Event {",
            "  ${1:Name}(${3:});",
            "  @override",
            "  String toString() => \"${1:Name}\";",
            "}"
        ],
        "description": "Create Bloc event class definition"
    },
    "Add todo": {
        "prefix": "todo",
        "body": "// @TODO(${1:*}): ${2:code here}",
        "description": "Add todo comment"
    },
    "Create bloc class": {
        "prefix": "blocclass",
        "body": [
            "class ${1:Name}Bloc extends Bloc<${1:Name}Event, ${1:Name}State> {",
            "  ${1:Name}Bloc();",
            "  ",
            "  @override",
            "  ${1:Name}State get initialState => ${1:Name}Loading();",
            "  ",
            "  @override",
            "  Stream<${1:Name}State> mapEventToState(${1:Name}Event event) async* {",
            "     // yield* xxx",
            "  }",
            "}"
        ]
    }
}

